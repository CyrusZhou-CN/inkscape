// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Remember what the current style context is and test for changes.
 *
 * Authors:
 *   Martin Owens <doctormo@geek-2.com>
 *
 * Copyright (C) 2025 Authors
 *
 * Released under GNU GPL v2+, read the file 'COPYING' for more information.
 */

#ifndef EXTENSION_INTERNAL_PDFOUTPUT_REMEMBERSTYLES_H
#define EXTENSION_INTERNAL_PDFOUTPUT_REMEMBERSTYLES_H

#include <set>
#include <stack>
#include <string>

#include "attributes.h"
#include "style.h"
#include "util/scope_exit.h"

class SPStyle;

namespace Inkscape::Extension::Internal {

using StyleMap = std::map<SPAttr, std::string>;

class StyleMemory
{
public:
    /**
     * Construct a new style memeory and ask for specific attrs.
     *
     * @param remember_attrs - A set of SPAttr enums to keep track of.
     */
    explicit StyleMemory(std::set<SPAttr> remember_attrs)
        : _attrs(std::move(remember_attrs))
    {
        _changes.push({});
    }

    /**
     * Return a StyleMap of all the differences between the state and the given style.
     *
     * @param style - The SPStyle to compare to.
     *
     * @returns A delta map containing only elements that have changed.
     */
    StyleMap get_changes(SPStyle const *style) const;

    /**
     * Modify the changes scope without managing the FILO stack.
     */
    StyleMap get_changes_and_remember(SPStyle const *style)
    {
        StyleMap changes = get_changes(style);
        _push(changes);
        return changes;
    }

    /**
     * Return a StyleMap of all the set styles, filtered in the same way as get_changes.
     */
    StyleMap get_ifset(SPStyle const *style) const;

    /**
     * Get the current state map, empty if nothing is on the stack or
     * contains every attr at the current state. Not just the last delta
     *
     * @returns A full attribute state map.
     */
    StyleMap const &get_state() const
    {
        return _changes.top();
    };

    /**
     * Add the given map to the stack and return a scoped object. The stack
     * Will be automatically returned when the scope object is deleted.
     *
     * @param map - The StyleMap delta to add to the stack generated by get_changes()
     *
     * @returns A scope object for managing the stack.
     */
    [[nodiscard]] auto remember(StyleMap map)
    {
        _push(std::move(map));
        return scope_exit([this] { _changes.pop(); });
    }

private:
    // A list of CSS properties to watch for changes in
    std::set<SPAttr> const _attrs;

    // A stack of complete StyleMaps strings
    std::stack<StyleMap> _changes;

    void _push(StyleMap changes)
    {
        // The incoming map is a delta, but we must store a merge between the previous and the delta.
        auto current = get_state();
        changes.merge(std::move(current));
        _changes.push(std::move(changes));
    }
};

} // namespace Inkscape::Extension::Internal

#endif /* !EXTENSION_INTERNAL_PDFOUTPUT_REMEMBERSTYLES_H */

/*
  Local Variables:
  mode:c++
  c-file-style:"stroustrup"
  c-file-offsets:((innamespace . 0)(inline-open . 0)(case-label . +))
  indent-tabs-mode:nil
  fill-column:99
  End:
*/
// vim: filetype=cpp:expandtab:shiftwidth=4:tabstop=8:softtabstop=4:fileencoding=utf-8:textwidth=99 :
